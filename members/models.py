from __future__ import unicode_literals

from django.db import models
from django.contrib.auth.models import PermissionsMixin
from django.contrib.auth.base_user import AbstractBaseUser
from django.utils.translation import ugettext_lazy as _

from members.user_manager import UserManager
from constants.constants import USER_ACCOUNT_STATUS

from app.conf import base as settings

class User(AbstractBaseUser, PermissionsMixin):

    email = models.EmailField(_('email'), unique=True, max_length=255)
    first_name = models.CharField(_('firstName'), max_length=30)
    display_name = models.CharField(_('displayName'), max_length=30)
    last_name = models.CharField(_('lastName'), max_length=30, blank=True)
    date_joined = models.DateTimeField(_('dateJoined'), auto_now_add=True)
    is_staff = models.BooleanField(_('staff'), default=False)
    status=models.PositiveIntegerField(default=1,choices=USER_ACCOUNT_STATUS)
    lang=models.CharField(_('language'),max_length=6,default='en',choices=settings.LANGUAGES) #in which language does the user want to interact with us? E.g. email, webview or sms

    objects = UserManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['first_name', 'display_name']

    class Meta:
        verbose_name = _('user')
        verbose_name_plural = _('users')

    def get_full_name(self):
        '''
        Returns the first_name plus the last_name, with a space in between.
        '''
        full_name = '%s %s' % (self.first_name, self.last_name)
        return full_name.strip()

    def get_short_name(self):
        '''
        Returns the short name for the user.
        '''
        return self.first_name


class Task(models.Model):
    '''
    Tasks handled by teh system
    '''
    name = models.CharField(_('taskName'), max_length = 255)
    created_by = models.ForeignKey(settings.AUTH_USER_MODEL,related_name='user_task',on_delete=models.CASCADE)

class PermissionExtra(models.Model):
    '''
    extra permissions that are not auto generated by django itself.
    '''

    class Meta:
        managed = False
        default_permissions = ()

        permissions = (

            ('extra_can_read_task', 'Can read tasks'),

        )


